#include <iostream>

using namespace std;

#pragma region 포인터
/*
포인터
 포인터는 메모리 주소를 저장하는 변수입니다
 모든 데이터는 메모리 상에 특정한 공간에 저장되어있다
 기존의 우리가 알고있는 변수는 데이터를 저장하지만 포인터는 메모리 공간의 주소를 저장
 포인터 변수가 주소를 저장하려면 변수의 주소를 알아야함
  변수이름 앞에 &연산자를 붙이면 해당 변수의 시작주소를 반환한다
 포인터 변수에 저장하는 변수의 주소에 저장된 값을 참조하려면 *연산자 사용
 
 & : 특정한 데이터의 메모리 상의 주소값을 알아낸다
 * : 주소값에서 해당 주소값의 데이터를 가져온다

 포인터 변수는 주소만 저장하는 것이지만 타입을 갖고있다
 타입마다 바이트수가 다르기에 주소값에서 읽어들이는 양을 알아야하기에 타입이 존대 

*/
#pragma endregion


/*
절대로 변하지 않을 값을 const를 붙여 상수로 만드는 습관을 기르자
const 

const int 형 변수를 가르키는것이 아니라
int형 변수를 가리키는데 그 값을 절대로 바꾸지 말라는 뜻
즉 pa가 어떤 int형 변수를 가리키는데
const가 붙어 있기에 가리키는 값은 상수가 되어야한다

*/

int main()
{
	int* p; //포인터 변수 p선언
	int a = 2;
	p = &a; // 변수 a의 주소를 저장
	cout << "p의값은 : " << p << endl;
	cout << "p의 주소에 저장된 데이터값은 : " << *p << endl;
	*p = 4;
	cout << "변경 후 p의 주소에 저장된 데이터값은 : " << *p << endl;

	const int* cp;
	int d = 5;
	cp = &d;
	cout << "cp의 주소에 저장된 데이터값은 : " << *cp << endl;
	//*cp = 10; 불가능
	cp = p;
	cout << "cp의 주소에 저장된 데이터값은 : " << *cp << endl;

	const int* a_p; // 상수를 가리키는 포인터
	int const * b_p;  // 상수를 가리키는 포인터
	int* const c_p = &d; // 상수 포인터


	return 0;
}